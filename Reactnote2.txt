What is useState() in React?
The useState() is a built-in React Hook that allows you for having state variables in functional components. 
It should be used when the DOM has something that is dynamically manipulating/controlling.

In the below-given example code, The useState(0) will return a tuple where the count is the first parameter 
that represents the counter’s current state and the second parameter setCounter method 
will allow us to update the state of the counter.

...
const [count, setCounter] = useState(0);
const [otherStuffs, setOtherStuffs] = useState(...);
...
const setCount = () => {
   setCounter(count + 1);
   setOtherStuffs(...);
   ...
};
We can make use of setCounter() method for updating the state of count anywhere. 
In this example, we are using setCounter() inside the setCount function where various other things can also be done. 
The idea with the usage of hooks is that we will be able to keep our code more functional and avoid 
class-based components if they are not required.


What are props in React?
The props in React are the inputs to a component of React. 
They can be single-valued or objects having a set of values that will be passed to components of 
React during creation by using a naming convention that almost looks similar to HTML-tag attributes. 
We can say that props are the data passed from a parent component into a child component.

The main purpose of props is to provide different component functionalities such as:

Passing custom data to the React component.
Using through this.props.reactProp inside render() method of the component.
Triggering state changes.
For example, consider we are creating an element with reactProp property as given below: 
<Element reactProp = "1" />
This reactProp name will be considered as a property attached to the 
native props object of React which already exists on each component 
created with the help of React library: props.reactProp;.

What is React Hooks?
React Hooks are the built-in functions that permit developers for using the state and 
lifecycle methods within React components. These are newly added features made available in React 16.8 version. 
Each lifecycle of a component is having 3 phases which include mount, unmount, and update. 
Along with that, components have properties and states. Hooks will allow using these methods 
by developers for improving the reuse of code with higher flexibility navigating the component tree.

Using Hook, all features of React can be used without writing class components. 
For example, before React version 16.8, it required a class component for managing the state of a component. 
But now using the useState hook, we can keep the state in a functional component

What are Hooks? Hooks are functions that let us “hook into” React state and lifecycle features from a functional component.

React Hooks cannot be used in class components. They let us write components without class.

Why were Hooks introduced in React?

React hooks were introduced in the 16.8 version of React. Previously, 
functional components were called stateless components. Only class components 
were used for state management and lifecycle methods.
 The need to change a functional component to a class component, 
whenever state management or lifecycle methods were to be used, led to the development of Hooks.

What are the rules that must be followed while using React Hooks?
There are 2 rules which must be followed while you code with Hooks:

React Hooks must be called only at the top level. 
It is not allowed to call them inside the nested functions, loops, or conditions.
It is allowed to call the Hooks only from the React Function Components